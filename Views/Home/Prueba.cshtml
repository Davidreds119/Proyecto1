@model Prueba_1.Models.Clientes
@{
    // Establece el título de la pestaña del navegador
    ViewData["Title"] = "Carga Dinámica de Datos";
} 
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" type="text/javascript"></script>


<!-- Título principal de la sección de datos con mejor diseño -->
<div class="text-center mt-4 mb-4">
    <h1 class="fw-bold" style="color: #495057; letter-spacing: 1px; text-shadow: 1px 1px 0 #dee2e6;">Carga Dinámica de Datos</h1>
    <p class="text-secondary">Sube archivos JSON o XML y visualiza su contenido de forma automática</p>
</div>
     <br />

<div class="container">
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        Cargar Archivo
                    </h5>
                </div>
                <div class="card-body">
                    <input type="file" id="fileInput" accept=".json,.xml" class="form-control" />
                    <small class="text-muted">Soporta archivos JSON y XML con cualquier estructura</small>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        Información
                    </h5>
                </div>
                <div class="card-body">
                    <p class="mb-1"><strong>Archivos cargados:</strong> <span id="archivosCargados">0</span></p>
                    <p class="mb-1"><strong>Registros procesados:</strong> <span id="registrosProcesados">0</span></p>
                    <p class="mb-0"><strong>Última carga:</strong> <span id="ultimaCarga">Nunca</span></p>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        Datos Cargados
                    </h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table id="tablaDinamica" class="table table-striped table-hover">
                            <thead id="tablaHeader">
                                <!-- Los encabezados se generarán dinámicamente -->
    </thead>
                            <tbody id="tablaBody">
                                <!-- Los datos se cargarán dinámicamente -->
    </tbody>
</table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border: 1px solid #ddd;
    }
    
    .card-header {
        background: #3498db;
        color: white;
        border-radius: 8px 8px 0 0 !important;
        border-bottom: 1px solid #ddd;
    }
    
    .table th {
        background: #34495e;
        color: white;
        border: none;
        font-weight: 600;
    }
    
    .table tbody tr:hover {
        background-color: #f8f9fa;
        transition: all 0.2s ease;
    }
    
    .btn-action {
        border-radius: 6px;
        padding: 8px 16px;
        font-weight: 500;
        transition: all 0.2s ease;
        border: 1px solid #ddd;
    }
    
    .btn-action:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    
    .alert {
        border-radius: 6px;
        border: 1px solid #ddd;
    }
    
    .loading {
        position: relative;
        overflow: hidden;
    }
    
    .loading::after {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        animation: loading 1.5s infinite;
    }
    
    @@keyframes loading {
        0% { left: -100%; }
        100% { left: 100%; }
    }
</style>

<script>
    let datosCargados = [];
    let archivosCargados = 0;
    let registrosProcesados = 0;

    $(document).ready(function() {
        configurarCargaArchivos();
        actualizarEstadisticas();
    });

    function configurarCargaArchivos() {
    document.getElementById('fileInput').addEventListener('change', function (event) {
        const file = event.target.files[0];
        if (!file) return;

        // Limpiar tabla antes de cargar nuevos datos
        limpiarTablaCompletamente();

        // Mostrar indicador de carga
        $('.container').addClass('loading');
            
        const reader = new FileReader();
        reader.onload = function (e) {
            const content = e.target.result;
                
                try {
                    if (file.name.endsWith('.json')) {
                        procesarJSON(content);
                    } else if (file.name.endsWith('.xml')) {
                        procesarXML(content);
                    } else {
                        mostrarAlerta('Solo se permiten archivos .json o .xml', 'warning');
                    }
                } catch (error) {
                    mostrarAlerta('Error al procesar el archivo: ' + error.message, 'danger');
                } finally {
                    $('.container').removeClass('loading');
                }
            };
            
            reader.onerror = function() {
                mostrarAlerta('Error al leer el archivo', 'danger');
                $('.container').removeClass('loading');
            };
            
            reader.readAsText(file);
        });
    }

    function procesarJSON(content) {
        try {
            // Validar que el contenido no esté vacío
            if (!content || content.trim() === '') {
                mostrarAlerta('El archivo JSON está vacío', 'warning');
                return;
            }
            
                    const data = JSON.parse(content);
            procesarDatos(data);
        } catch (error) {
            let mensajeError = 'El archivo JSON no es válido: ' + error.message;
            
            // Proporcionar sugerencias específicas según el error
            if (error.message.includes('Unexpected end')) {
                mensajeError = 'El archivo JSON está incompleto. Verifica que no falten llaves o corchetes de cierre.';
            } else if (error.message.includes('Unexpected token')) {
                mensajeError = 'El archivo JSON contiene caracteres inválidos. Verifica la sintaxis JSON.';
            } else if (error.message.includes('Unexpected number')) {
                mensajeError = 'El archivo JSON contiene números mal formados. Verifica los valores numéricos.';
            }
            
            mostrarAlerta(mensajeError, 'danger');
        }
    }

    function procesarXML(content) {
        try {
            // Validar que el contenido no esté vacío
            if (!content || content.trim() === '') {
                mostrarAlerta('El archivo XML está vacío', 'warning');
                return;
            }
            
            // Verificar que el contenido comience con '<'
            if (!content.trim().startsWith('<')) {
                mostrarAlerta('El archivo no parece ser un XML válido. Debe comenzar con un tag XML (ej: <root>)', 'warning');
                return;
            }
            
            const xml = $.parseXML(content);
            const data = [];
            const processedElements = new Set(); // Para evitar duplicados
            
            // Limpiar datos anteriores
            datosCargados = [];
            
            // Estrategia 1: Buscar elementos que contengan datos estructurados
            $(xml).find('*').each(function() {
                const element = $(this);
                const elementName = element.prop('tagName').toLowerCase();
                
                // Evitar procesar elementos ya procesados
                if (processedElements.has(element[0])) {
                    return;
                }
                
                // Solo procesar elementos que tengan hijos con datos y que parezcan ser registros
                if (element.children().length > 0) {
                    const record = {};
                    let tieneDatos = false;
                    let esRegistroValido = false;
                    
                    element.children().each(function() {
                        const child = $(this);
                        const childText = child.text().trim();
                        if (childText !== '') {
                            record[child.prop('tagName').toLowerCase()] = childText;
                            tieneDatos = true;
                            
                            // Verificar si parece ser un registro de cliente
                            const childName = child.prop('tagName').toLowerCase();
                            if (childName === 'pkclientes' || childName === 'nombre' || 
                                childName === 'apellido' || childName === 'apellido2' || 
                                childName === 'cedula') {
                                esRegistroValido = true;
                            }
                        }
                    });
                    
                    // Solo agregar si tiene datos y parece ser un registro válido
                    if (tieneDatos && Object.keys(record).length > 0 && esRegistroValido) {
                        // Verificar que no sea un registro duplicado
                        const recordKey = JSON.stringify(record);
                        if (!processedElements.has(recordKey)) {
                            data.push(record);
                            processedElements.add(recordKey);
                        }
                    }
                }
                
                // Marcar este elemento como procesado
                processedElements.add(element[0]);
            });
            
            // Estrategia 2: Si no hay datos estructurados, buscar elementos con atributos
            if (data.length === 0) {
                $(xml).find('*').each(function() {
                    const element = $(this);
                    const record = {};
                    
                    // Agregar atributos
                    element.each(function() {
                        const attrs = this.attributes;
                        for (let i = 0; i < attrs.length; i++) {
                            record[attrs[i].name] = attrs[i].value;
                        }
                    });
                    
                    // Agregar contenido del elemento
                    const text = element.text().trim();
                    if (text !== '') {
                        record['contenido'] = text;
                    }
                    
                    if (Object.keys(record).length > 0) {
                        const recordKey = JSON.stringify(record);
                        if (!processedElements.has(recordKey)) {
                            data.push(record);
                            processedElements.add(recordKey);
                        }
                    }
                });
            }
            
            // Estrategia 3: Procesar elementos simples con texto
            if (data.length === 0) {
                $(xml).find('*').each(function() {
                    const element = $(this);
                    if (element.children().length === 0) {
                        const text = element.text().trim();
                        if (text !== '') {
                            const record = {
                                'elemento': element.prop('tagName').toLowerCase(),
                                'valor': text
                            };
                            const recordKey = JSON.stringify(record);
                            if (!processedElements.has(recordKey)) {
                                data.push(record);
                                processedElements.add(recordKey);
                            }
                        }
                    }
                });
            }
            
            procesarDatos(data);
        } catch (error) {
            let mensajeError = 'Error al procesar XML: ' + error.message;
            
            // Proporcionar sugerencias específicas según el error
            if (error.message.includes('Start tag expected')) {
                mensajeError = 'El archivo no es un XML válido. Asegúrate de que el archivo comience con un tag XML (ej: <root>).';
            } else if (error.message.includes('Unexpected end')) {
                mensajeError = 'El archivo XML está incompleto o mal formado. Verifica que todos los tags estén cerrados correctamente.';
            } else if (error.message.includes('Invalid XML')) {
                mensajeError = 'El archivo contiene XML mal formado. Verifica la sintaxis XML.';
            }
            
            mostrarAlerta(mensajeError, 'danger');
        }
    }

    function procesarDatos(data) {
        if (!Array.isArray(data)) {
            // Si no es un array, convertirlo en uno
            data = [data];
        }
        
        if (data.length === 0) {
            mostrarAlerta('No se encontraron datos válidos en el archivo', 'warning');
            return;
        }

        // Limpiar datos anteriores completamente
        datosCargados = [];
        
        // Filtrar solo registros que tengan al menos 2 campos válidos
        const datosFiltrados = data.filter(item => {
            if (!item || typeof item !== 'object') return false;
            
            const camposValidos = Object.keys(item).filter(key => {
                const valor = item[key];
                return valor && valor.toString().trim() !== '';
            });
            
            return camposValidos.length >= 2;
        });
        
        if (datosFiltrados.length === 0) {
            mostrarAlerta('No se encontraron registros válidos en el archivo', 'warning');
            return;
        }

        // Generar encabezados dinámicamente
        const headers = generarEncabezados(datosFiltrados);
        
        // Actualizar tabla
        actualizarTabla(headers, datosFiltrados);
        
        // Actualizar estadísticas
        archivosCargados++;
        registrosProcesados += datosFiltrados.length;
        actualizarEstadisticas();
        
        mostrarAlerta(`Archivo procesado exitosamente. ${datosFiltrados.length} registros cargados.`, 'success');
    }

    function generarEncabezados(data) {
        const headers = new Set();
        
        data.forEach(item => {
            if (typeof item === 'object' && item !== null) {
                Object.keys(item).forEach(key => {
                    if (key !== '_parent') { // Excluir metadatos internos
                        headers.add(key);
                    }
                });
            }
        });
        
        return Array.from(headers);
    }

    function actualizarTabla(headers, data) {
        const thead = $('#tablaHeader');
        const tbody = $('#tablaBody');
        
        // Limpiar tabla completamente
        thead.empty();
        tbody.empty();
        
        // Verificar que tenemos datos válidos
        if (!headers || headers.length === 0 || !data || data.length === 0) {
            return;
        }
        
        // Crear encabezados
        const headerRow = $('<tr>');
        headers.forEach(header => {
            headerRow.append(`<th>${capitalizarPrimeraLetra(header)}</th>`);
        });
        thead.append(headerRow);
        
        // Crear filas de datos
        data.forEach(item => {
            if (item && typeof item === 'object') {
                const row = $('<tr>');
                headers.forEach(header => {
                    const value = item[header] || '';
                    row.append(`<td>${escapeHtml(value)}</td>`);
                });
                tbody.append(row);
            }
        });
    }

    function capitalizarPrimeraLetra(str) {
        return str.charAt(0).toUpperCase() + str.slice(1).replace(/([A-Z])/g, ' $1');
    }

    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    function actualizarEstadisticas() {
        $('#archivosCargados').text(archivosCargados);
        $('#registrosProcesados').text(registrosProcesados);
        $('#ultimaCarga').text(new Date().toLocaleString());
    }

    function mostrarAlerta(mensaje, tipo) {
        // Prevenir múltiples llamadas simultáneas
        if (window.alertaMostrandose) {
            return;
        }
        
        window.alertaMostrandose = true;
        
        // Configurar el icono según el tipo de alerta
        let icono = 'info';
        switch(tipo) {
            case 'success':
                icono = 'success';
                break;
            case 'danger':
                icono = 'error';
                break;
            case 'warning':
                icono = 'warning';
                break;
            default:
                icono = 'info';
        }
        
        // Mostrar alerta usando SweetAlert2
        Swal.fire({
            title: mensaje,
            icon: icono,
            timer: 3000,
            timerProgressBar: true,
            showConfirmButton: false,
            allowOutsideClick: true
        }).then(() => {
            window.alertaMostrandose = false;
        });
    }

    // Función para limpiar la tabla completamente
    function limpiarTablaCompletamente() {
        $('#tablaHeader').empty();
        $('#tablaBody').empty();
        datosCargados = [];
    }

    // Función para limpiar la tabla
    function limpiarTabla() {
        $('#tablaHeader').empty();
        $('#tablaBody').empty();
        datosCargados = [];
        mostrarAlerta('Tabla limpiada', 'info');
    }



    // Función para exportar datos
    function exportarDatos() {
        const headers = [];
        $('#tablaHeader th').each(function() {
            headers.push($(this).text());
        });
        
        const data = [];
        $('#tablaBody tr').each(function() {
            const row = {};
            $(this).find('td').each(function(index) {
                row[headers[index]] = $(this).text();
            });
            data.push(row);
        });
        
        if (data.length === 0) {
            mostrarAlerta('No hay datos para exportar', 'warning');
            return;
        }
        
        const jsonData = JSON.stringify(data, null, 2);
        const blob = new Blob([jsonData], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'datos_exportados.json';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        mostrarAlerta('Datos exportados exitosamente', 'success');
    }


</script>
